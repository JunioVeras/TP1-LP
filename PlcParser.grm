fun exp2string (ConI(i)) = "ConI(" ^ Int.toString(i) ^ ")"
  | exp2string (ConB(b)) = "ConB(" ^ Bool.toString(b) ^ ")"
  | exp2string (Prim2(operation, x, y)) = "Prim2(\"" ^ operation ^ "\", " ^ exp2string(x) ^ ", " ^ exp2string(y) ^ ")"
  | exp2string (Prim1(operation, x)) = "Prim1(\"" ^ operation ^ "\", " ^ exp2string(x) ^ ")"
  | exp2string (Item(i, x)) = "Item(" ^ Int.toString(i) ^ ", " ^ exp2string(x) ^ ")"
  | exp2string (If(x, y, z)) = "If(" ^ exp2string(x) ^ ", " ^ exp2string(y) ^ ", " ^ exp2string(z) ^ ")";

%%

%name PlcParser
%pos int

%right SEMI ARROW
%nonassoc IF
%left ELSE
%left AND
%left EQ DIF
%left LESS LESSEQ
%left INFIX
%left PLUS MINUS
%left TIMES DIV
%nonassoc NOT HD TL ISE PRINT
%left OBRACE

%term   NUM of int      |
        PLUS            |
        MINUS           |
        TIMES           |
        DIV             |
        EQ              |
        DIF             |
        LESS            |
        LESSEQ          |

        BOOL of bool    |
        AND             |
        NOT             |

        HD              |
        TL              |
        ISE             |
        INFIX           |

        PRINT           |

        OPAR            |
        CPAR            |
        OBRACE          |
        CBRACE          |
        OBRACKET        |
        CBRACKET        |
        SEMI            |

        IF              |
        THEN            |
        ELSE            |
        MATCH           |
        WITH            |

        ARROW           |

        EOF

%nonterm    Prog of unit        |
            Expr of expr        |
            AtomExpr of expr    |
            Const of expr

%eop EOF
%noshift EOF
%start Prog

%%

Prog    : Expr                  (print ("result = "^ exp2string(Expr) ^ "\n" ))

Expr    : AtomExpr              (AtomExpr)
        | IF Expr THEN Expr ELSE Expr (If(Expr1, Expr2, Expr3))
        | NOT Expr              (Prim1("!", Expr))
        | MINUS Expr            (Prim1("~", Expr))
        | HD Expr               (Prim1("hd", Expr))
        | TL Expr               (Prim1("tl", Expr))
        | ISE Expr              (Prim1("ise", Expr))
        | PRINT Expr            (Prim1("print", Expr))
        | Expr AND Expr         (Prim2("&&", Expr1, Expr2))
        | Expr PLUS Expr        (Prim2("+", Expr1, Expr2))
        | Expr MINUS Expr       (Prim2("-", Expr1, Expr2))
        | Expr TIMES Expr       (Prim2("*", Expr1, Expr2))
        | Expr DIV Expr         (Prim2("/", Expr1, Expr2))
        | Expr EQ Expr          (Prim2("=", Expr1, Expr2))
        | Expr DIF Expr         (Prim2("!=", Expr1, Expr2))
        | Expr LESS Expr        (Prim2("<", Expr1, Expr2))
        | Expr LESSEQ Expr      (Prim2("<=", Expr1, Expr2))
        | Expr INFIX Expr       (Prim2("::", Expr1, Expr2))
        | Expr SEMI Expr        (Prim2(";", Expr1, Expr2))
        | Expr OBRACE NUM CBRACE(Item(NUM, Expr))

AtomExpr: Const                 (Const)
        | OPAR Expr CPAR        (Expr)

Const   : BOOL                  (ConB(BOOL))
        | NUM                   (ConI(NUM))